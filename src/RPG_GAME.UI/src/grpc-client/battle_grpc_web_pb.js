/**
 * @fileoverview gRPC-Web generated client stub for battle
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.2
// source: battle.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.battle = require('./battle_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.battle.BattleClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.battle.BattlePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battle.PrepareBattleRequest,
 *   !proto.battle.BattleResponse>}
 */
const methodDescriptor_Battle_PrepareBattle = new grpc.web.MethodDescriptor(
  '/battle.Battle/PrepareBattle',
  grpc.web.MethodType.UNARY,
  proto.battle.PrepareBattleRequest,
  proto.battle.BattleResponse,
  /**
   * @param {!proto.battle.PrepareBattleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battle.BattleResponse.deserializeBinary
);


/**
 * @param {!proto.battle.PrepareBattleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battle.BattleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battle.BattleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battle.BattleClient.prototype.prepareBattle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battle.Battle/PrepareBattle',
      request,
      metadata || {},
      methodDescriptor_Battle_PrepareBattle,
      callback);
};


/**
 * @param {!proto.battle.PrepareBattleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battle.BattleResponse>}
 *     Promise that resolves to the response
 */
proto.battle.BattlePromiseClient.prototype.prepareBattle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battle.Battle/PrepareBattle',
      request,
      metadata || {},
      methodDescriptor_Battle_PrepareBattle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battle.BattleRequest,
 *   !proto.battle.StartBattleResponse>}
 */
const methodDescriptor_Battle_StartBattle = new grpc.web.MethodDescriptor(
  '/battle.Battle/StartBattle',
  grpc.web.MethodType.UNARY,
  proto.battle.BattleRequest,
  proto.battle.StartBattleResponse,
  /**
   * @param {!proto.battle.BattleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battle.StartBattleResponse.deserializeBinary
);


/**
 * @param {!proto.battle.BattleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battle.StartBattleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battle.StartBattleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battle.BattleClient.prototype.startBattle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battle.Battle/StartBattle',
      request,
      metadata || {},
      methodDescriptor_Battle_StartBattle,
      callback);
};


/**
 * @param {!proto.battle.BattleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battle.StartBattleResponse>}
 *     Promise that resolves to the response
 */
proto.battle.BattlePromiseClient.prototype.startBattle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battle.Battle/StartBattle',
      request,
      metadata || {},
      methodDescriptor_Battle_StartBattle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battle.BattleRequest,
 *   !proto.battle.BattleResponse>}
 */
const methodDescriptor_Battle_CompleteBattle = new grpc.web.MethodDescriptor(
  '/battle.Battle/CompleteBattle',
  grpc.web.MethodType.UNARY,
  proto.battle.BattleRequest,
  proto.battle.BattleResponse,
  /**
   * @param {!proto.battle.BattleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battle.BattleResponse.deserializeBinary
);


/**
 * @param {!proto.battle.BattleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battle.BattleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battle.BattleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battle.BattleClient.prototype.completeBattle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battle.Battle/CompleteBattle',
      request,
      metadata || {},
      methodDescriptor_Battle_CompleteBattle,
      callback);
};


/**
 * @param {!proto.battle.BattleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battle.BattleResponse>}
 *     Promise that resolves to the response
 */
proto.battle.BattlePromiseClient.prototype.completeBattle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battle.Battle/CompleteBattle',
      request,
      metadata || {},
      methodDescriptor_Battle_CompleteBattle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battle.AddBattleEventRequest,
 *   !proto.battle.AddBattleEventResponse>}
 */
const methodDescriptor_Battle_AddBattleEvent = new grpc.web.MethodDescriptor(
  '/battle.Battle/AddBattleEvent',
  grpc.web.MethodType.UNARY,
  proto.battle.AddBattleEventRequest,
  proto.battle.AddBattleEventResponse,
  /**
   * @param {!proto.battle.AddBattleEventRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battle.AddBattleEventResponse.deserializeBinary
);


/**
 * @param {!proto.battle.AddBattleEventRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battle.AddBattleEventResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battle.AddBattleEventResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battle.BattleClient.prototype.addBattleEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battle.Battle/AddBattleEvent',
      request,
      metadata || {},
      methodDescriptor_Battle_AddBattleEvent,
      callback);
};


/**
 * @param {!proto.battle.AddBattleEventRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battle.AddBattleEventResponse>}
 *     Promise that resolves to the response
 */
proto.battle.BattlePromiseClient.prototype.addBattleEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battle.Battle/AddBattleEvent',
      request,
      metadata || {},
      methodDescriptor_Battle_AddBattleEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battle.GetCurrentBattlesRequest,
 *   !proto.battle.GetCurrentBattlesResponse>}
 */
const methodDescriptor_Battle_GetCurrentBattles = new grpc.web.MethodDescriptor(
  '/battle.Battle/GetCurrentBattles',
  grpc.web.MethodType.UNARY,
  proto.battle.GetCurrentBattlesRequest,
  proto.battle.GetCurrentBattlesResponse,
  /**
   * @param {!proto.battle.GetCurrentBattlesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battle.GetCurrentBattlesResponse.deserializeBinary
);


/**
 * @param {!proto.battle.GetCurrentBattlesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battle.GetCurrentBattlesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battle.GetCurrentBattlesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battle.BattleClient.prototype.getCurrentBattles =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battle.Battle/GetCurrentBattles',
      request,
      metadata || {},
      methodDescriptor_Battle_GetCurrentBattles,
      callback);
};


/**
 * @param {!proto.battle.GetCurrentBattlesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battle.GetCurrentBattlesResponse>}
 *     Promise that resolves to the response
 */
proto.battle.BattlePromiseClient.prototype.getCurrentBattles =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battle.Battle/GetCurrentBattles',
      request,
      metadata || {},
      methodDescriptor_Battle_GetCurrentBattles);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.battle.GetBattleStateRequest,
 *   !proto.battle.GetBattleStateResponse>}
 */
const methodDescriptor_Battle_GetBattleState = new grpc.web.MethodDescriptor(
  '/battle.Battle/GetBattleState',
  grpc.web.MethodType.UNARY,
  proto.battle.GetBattleStateRequest,
  proto.battle.GetBattleStateResponse,
  /**
   * @param {!proto.battle.GetBattleStateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.battle.GetBattleStateResponse.deserializeBinary
);


/**
 * @param {!proto.battle.GetBattleStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.battle.GetBattleStateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.battle.GetBattleStateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.battle.BattleClient.prototype.getBattleState =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/battle.Battle/GetBattleState',
      request,
      metadata || {},
      methodDescriptor_Battle_GetBattleState,
      callback);
};


/**
 * @param {!proto.battle.GetBattleStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.battle.GetBattleStateResponse>}
 *     Promise that resolves to the response
 */
proto.battle.BattlePromiseClient.prototype.getBattleState =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/battle.Battle/GetBattleState',
      request,
      metadata || {},
      methodDescriptor_Battle_GetBattleState);
};


module.exports = proto.battle;

