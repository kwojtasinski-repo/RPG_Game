// source: battle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.battle.AddBattleEventRequest', null, global);
goog.exportSymbol('proto.battle.AddBattleEventResponse', null, global);
goog.exportSymbol('proto.battle.BattleDto', null, global);
goog.exportSymbol('proto.battle.BattleRequest', null, global);
goog.exportSymbol('proto.battle.BattleResponse', null, global);
goog.exportSymbol('proto.battle.BattleState', null, global);
goog.exportSymbol('proto.battle.DecimalValue', null, global);
goog.exportSymbol('proto.battle.Dictionary', null, global);
goog.exportSymbol('proto.battle.Enemies', null, global);
goog.exportSymbol('proto.battle.EnemyAssign', null, global);
goog.exportSymbol('proto.battle.FightAction', null, global);
goog.exportSymbol('proto.battle.GetBattleStateRequest', null, global);
goog.exportSymbol('proto.battle.GetBattleStateResponse', null, global);
goog.exportSymbol('proto.battle.GetCurrentBattlesRequest', null, global);
goog.exportSymbol('proto.battle.GetCurrentBattlesResponse', null, global);
goog.exportSymbol('proto.battle.HeroAssign', null, global);
goog.exportSymbol('proto.battle.Map', null, global);
goog.exportSymbol('proto.battle.Pair', null, global);
goog.exportSymbol('proto.battle.Player', null, global);
goog.exportSymbol('proto.battle.PrepareBattleRequest', null, global);
goog.exportSymbol('proto.battle.SkillEnemyAssign', null, global);
goog.exportSymbol('proto.battle.SkillHeroAssign', null, global);
goog.exportSymbol('proto.battle.StartBattleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.PrepareBattleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.PrepareBattleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.PrepareBattleRequest.displayName = 'proto.battle.PrepareBattleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BattleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.BattleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BattleRequest.displayName = 'proto.battle.BattleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BattleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.BattleResponse.repeatedFields_, null);
};
goog.inherits(proto.battle.BattleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BattleResponse.displayName = 'proto.battle.BattleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.Map.repeatedFields_, null);
};
goog.inherits(proto.battle.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Map.displayName = 'proto.battle.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Enemies = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.Enemies, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Enemies.displayName = 'proto.battle.Enemies';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.EnemyAssign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.EnemyAssign.repeatedFields_, null);
};
goog.inherits(proto.battle.EnemyAssign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.EnemyAssign.displayName = 'proto.battle.EnemyAssign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.SkillEnemyAssign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.SkillEnemyAssign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.SkillEnemyAssign.displayName = 'proto.battle.SkillEnemyAssign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BattleState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.BattleState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BattleState.displayName = 'proto.battle.BattleState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Player.displayName = 'proto.battle.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.HeroAssign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.HeroAssign.repeatedFields_, null);
};
goog.inherits(proto.battle.HeroAssign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.HeroAssign.displayName = 'proto.battle.HeroAssign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.SkillHeroAssign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.SkillHeroAssign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.SkillHeroAssign.displayName = 'proto.battle.SkillHeroAssign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.AddBattleEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.AddBattleEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.AddBattleEventRequest.displayName = 'proto.battle.AddBattleEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.AddBattleEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.AddBattleEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.AddBattleEventResponse.displayName = 'proto.battle.AddBattleEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.FightAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.FightAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.FightAction.displayName = 'proto.battle.FightAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.DecimalValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.DecimalValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.DecimalValue.displayName = 'proto.battle.DecimalValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Pair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.Pair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Pair.displayName = 'proto.battle.Pair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.Dictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.Dictionary.repeatedFields_, null);
};
goog.inherits(proto.battle.Dictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.Dictionary.displayName = 'proto.battle.Dictionary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.StartBattleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.StartBattleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.StartBattleResponse.displayName = 'proto.battle.StartBattleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.GetCurrentBattlesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.GetCurrentBattlesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.GetCurrentBattlesRequest.displayName = 'proto.battle.GetCurrentBattlesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.GetCurrentBattlesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.battle.GetCurrentBattlesResponse.repeatedFields_, null);
};
goog.inherits(proto.battle.GetCurrentBattlesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.GetCurrentBattlesResponse.displayName = 'proto.battle.GetCurrentBattlesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.BattleDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.BattleDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.BattleDto.displayName = 'proto.battle.BattleDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.GetBattleStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.GetBattleStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.GetBattleStateRequest.displayName = 'proto.battle.GetBattleStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.battle.GetBattleStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.battle.GetBattleStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.battle.GetBattleStateResponse.displayName = 'proto.battle.GetBattleStateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.PrepareBattleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.PrepareBattleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.PrepareBattleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.PrepareBattleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mapid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.PrepareBattleRequest}
 */
proto.battle.PrepareBattleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.PrepareBattleRequest;
  return proto.battle.PrepareBattleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.PrepareBattleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.PrepareBattleRequest}
 */
proto.battle.PrepareBattleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.PrepareBattleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.PrepareBattleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.PrepareBattleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.PrepareBattleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMapid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.battle.PrepareBattleRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.PrepareBattleRequest} returns this
 */
proto.battle.PrepareBattleRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mapId = 2;
 * @return {string}
 */
proto.battle.PrepareBattleRequest.prototype.getMapid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.PrepareBattleRequest} returns this
 */
proto.battle.PrepareBattleRequest.prototype.setMapid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BattleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BattleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BattleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BattleRequest}
 */
proto.battle.BattleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BattleRequest;
  return proto.battle.BattleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BattleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BattleRequest}
 */
proto.battle.BattleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BattleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BattleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BattleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string battleId = 1;
 * @return {string}
 */
proto.battle.BattleRequest.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleRequest} returns this
 */
proto.battle.BattleRequest.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.battle.BattleRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleRequest} returns this
 */
proto.battle.BattleRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.BattleResponse.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BattleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BattleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BattleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startdate: (f = msg.getStartdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    battleinfo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    enddate: (f = msg.getEnddate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.battle.Map.toObject(includeInstance, f),
    battlestatesList: jspb.Message.toObjectList(msg.getBattlestatesList(),
    proto.battle.BattleState.toObject, includeInstance),
    enemieskilledList: jspb.Message.toObjectList(msg.getEnemieskilledList(),
    proto.battle.Dictionary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BattleResponse}
 */
proto.battle.BattleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BattleResponse;
  return proto.battle.BattleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BattleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BattleResponse}
 */
proto.battle.BattleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartdate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleinfo(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnddate(value);
      break;
    case 6:
      var value = new proto.battle.Map;
      reader.readMessage(value,proto.battle.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 7:
      var value = new proto.battle.BattleState;
      reader.readMessage(value,proto.battle.BattleState.deserializeBinaryFromReader);
      msg.addBattlestates(value);
      break;
    case 8:
      var value = new proto.battle.Dictionary;
      reader.readMessage(value,proto.battle.Dictionary.deserializeBinaryFromReader);
      msg.addEnemieskilled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BattleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BattleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BattleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBattleinfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEnddate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.battle.Map.serializeBinaryToWriter
    );
  }
  f = message.getBattlestatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.battle.BattleState.serializeBinaryToWriter
    );
  }
  f = message.getEnemieskilledList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.battle.Dictionary.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.BattleResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp startDate = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.BattleResponse.prototype.getStartdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.BattleResponse} returns this
*/
proto.battle.BattleResponse.prototype.setStartdate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.clearStartdate = function() {
  return this.setStartdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleResponse.prototype.hasStartdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string userId = 3;
 * @return {string}
 */
proto.battle.BattleResponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string battleInfo = 4;
 * @return {string}
 */
proto.battle.BattleResponse.prototype.getBattleinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.setBattleinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp endDate = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.BattleResponse.prototype.getEnddate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.BattleResponse} returns this
*/
proto.battle.BattleResponse.prototype.setEnddate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.clearEnddate = function() {
  return this.setEnddate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleResponse.prototype.hasEnddate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Map map = 6;
 * @return {?proto.battle.Map}
 */
proto.battle.BattleResponse.prototype.getMap = function() {
  return /** @type{?proto.battle.Map} */ (
    jspb.Message.getWrapperField(this, proto.battle.Map, 6));
};


/**
 * @param {?proto.battle.Map|undefined} value
 * @return {!proto.battle.BattleResponse} returns this
*/
proto.battle.BattleResponse.prototype.setMap = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleResponse.prototype.hasMap = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated BattleState battleStates = 7;
 * @return {!Array<!proto.battle.BattleState>}
 */
proto.battle.BattleResponse.prototype.getBattlestatesList = function() {
  return /** @type{!Array<!proto.battle.BattleState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.BattleState, 7));
};


/**
 * @param {!Array<!proto.battle.BattleState>} value
 * @return {!proto.battle.BattleResponse} returns this
*/
proto.battle.BattleResponse.prototype.setBattlestatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.battle.BattleState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.BattleState}
 */
proto.battle.BattleResponse.prototype.addBattlestates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.battle.BattleState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.clearBattlestatesList = function() {
  return this.setBattlestatesList([]);
};


/**
 * repeated Dictionary enemiesKilled = 8;
 * @return {!Array<!proto.battle.Dictionary>}
 */
proto.battle.BattleResponse.prototype.getEnemieskilledList = function() {
  return /** @type{!Array<!proto.battle.Dictionary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Dictionary, 8));
};


/**
 * @param {!Array<!proto.battle.Dictionary>} value
 * @return {!proto.battle.BattleResponse} returns this
*/
proto.battle.BattleResponse.prototype.setEnemieskilledList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.battle.Dictionary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Dictionary}
 */
proto.battle.BattleResponse.prototype.addEnemieskilled = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.battle.Dictionary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.BattleResponse} returns this
 */
proto.battle.BattleResponse.prototype.clearEnemieskilledList = function() {
  return this.setEnemieskilledList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.Map.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 3, ""),
    enemiesList: jspb.Message.toObjectList(msg.getEnemiesList(),
    proto.battle.Enemies.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Map}
 */
proto.battle.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Map;
  return proto.battle.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Map}
 */
proto.battle.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 4:
      var value = new proto.battle.Enemies;
      reader.readMessage(value,proto.battle.Enemies.deserializeBinaryFromReader);
      msg.addEnemies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEnemiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.battle.Enemies.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.Map.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Map} returns this
 */
proto.battle.Map.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.battle.Map.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Map} returns this
 */
proto.battle.Map.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string difficulty = 3;
 * @return {string}
 */
proto.battle.Map.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Map} returns this
 */
proto.battle.Map.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Enemies enemies = 4;
 * @return {!Array<!proto.battle.Enemies>}
 */
proto.battle.Map.prototype.getEnemiesList = function() {
  return /** @type{!Array<!proto.battle.Enemies>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Enemies, 4));
};


/**
 * @param {!Array<!proto.battle.Enemies>} value
 * @return {!proto.battle.Map} returns this
*/
proto.battle.Map.prototype.setEnemiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.battle.Enemies=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Enemies}
 */
proto.battle.Map.prototype.addEnemies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.battle.Enemies, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Map} returns this
 */
proto.battle.Map.prototype.clearEnemiesList = function() {
  return this.setEnemiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Enemies.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Enemies.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Enemies} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Enemies.toObject = function(includeInstance, msg) {
  var f, obj = {
    enemy: (f = msg.getEnemy()) && proto.battle.EnemyAssign.toObject(includeInstance, f),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Enemies}
 */
proto.battle.Enemies.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Enemies;
  return proto.battle.Enemies.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Enemies} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Enemies}
 */
proto.battle.Enemies.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.battle.EnemyAssign;
      reader.readMessage(value,proto.battle.EnemyAssign.deserializeBinaryFromReader);
      msg.setEnemy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Enemies.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Enemies.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Enemies} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Enemies.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnemy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.battle.EnemyAssign.serializeBinaryToWriter
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional EnemyAssign enemy = 1;
 * @return {?proto.battle.EnemyAssign}
 */
proto.battle.Enemies.prototype.getEnemy = function() {
  return /** @type{?proto.battle.EnemyAssign} */ (
    jspb.Message.getWrapperField(this, proto.battle.EnemyAssign, 1));
};


/**
 * @param {?proto.battle.EnemyAssign|undefined} value
 * @return {!proto.battle.Enemies} returns this
*/
proto.battle.Enemies.prototype.setEnemy = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.Enemies} returns this
 */
proto.battle.Enemies.prototype.clearEnemy = function() {
  return this.setEnemy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.Enemies.prototype.hasEnemy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 quantity = 2;
 * @return {number}
 */
proto.battle.Enemies.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Enemies} returns this
 */
proto.battle.Enemies.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.EnemyAssign.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.EnemyAssign.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.EnemyAssign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.EnemyAssign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.EnemyAssign.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attack: jspb.Message.getFieldWithDefault(msg, 3, 0),
    health: jspb.Message.getFieldWithDefault(msg, 4, 0),
    heallvl: jspb.Message.getFieldWithDefault(msg, 5, 0),
    experience: (f = msg.getExperience()) && proto.battle.DecimalValue.toObject(includeInstance, f),
    difficulty: jspb.Message.getFieldWithDefault(msg, 7, ""),
    category: jspb.Message.getFieldWithDefault(msg, 8, ""),
    skillsList: jspb.Message.toObjectList(msg.getSkillsList(),
    proto.battle.SkillEnemyAssign.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.EnemyAssign}
 */
proto.battle.EnemyAssign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.EnemyAssign;
  return proto.battle.EnemyAssign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.EnemyAssign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.EnemyAssign}
 */
proto.battle.EnemyAssign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttack(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHealth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeallvl(value);
      break;
    case 6:
      var value = new proto.battle.DecimalValue;
      reader.readMessage(value,proto.battle.DecimalValue.deserializeBinaryFromReader);
      msg.setExperience(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 9:
      var value = new proto.battle.SkillEnemyAssign;
      reader.readMessage(value,proto.battle.SkillEnemyAssign.deserializeBinaryFromReader);
      msg.addSkills(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.EnemyAssign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.EnemyAssign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.EnemyAssign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.EnemyAssign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttack();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeallvl();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getExperience();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.battle.DecimalValue.serializeBinaryToWriter
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.battle.SkillEnemyAssign.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.EnemyAssign.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.battle.EnemyAssign.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 attack = 3;
 * @return {number}
 */
proto.battle.EnemyAssign.prototype.getAttack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setAttack = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 health = 4;
 * @return {number}
 */
proto.battle.EnemyAssign.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 healLvl = 5;
 * @return {number}
 */
proto.battle.EnemyAssign.prototype.getHeallvl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setHeallvl = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional DecimalValue experience = 6;
 * @return {?proto.battle.DecimalValue}
 */
proto.battle.EnemyAssign.prototype.getExperience = function() {
  return /** @type{?proto.battle.DecimalValue} */ (
    jspb.Message.getWrapperField(this, proto.battle.DecimalValue, 6));
};


/**
 * @param {?proto.battle.DecimalValue|undefined} value
 * @return {!proto.battle.EnemyAssign} returns this
*/
proto.battle.EnemyAssign.prototype.setExperience = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.clearExperience = function() {
  return this.setExperience(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.EnemyAssign.prototype.hasExperience = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string difficulty = 7;
 * @return {string}
 */
proto.battle.EnemyAssign.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string category = 8;
 * @return {string}
 */
proto.battle.EnemyAssign.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated SkillEnemyAssign skills = 9;
 * @return {!Array<!proto.battle.SkillEnemyAssign>}
 */
proto.battle.EnemyAssign.prototype.getSkillsList = function() {
  return /** @type{!Array<!proto.battle.SkillEnemyAssign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.SkillEnemyAssign, 9));
};


/**
 * @param {!Array<!proto.battle.SkillEnemyAssign>} value
 * @return {!proto.battle.EnemyAssign} returns this
*/
proto.battle.EnemyAssign.prototype.setSkillsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.battle.SkillEnemyAssign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.SkillEnemyAssign}
 */
proto.battle.EnemyAssign.prototype.addSkills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.battle.SkillEnemyAssign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.EnemyAssign} returns this
 */
proto.battle.EnemyAssign.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.SkillEnemyAssign.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.SkillEnemyAssign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.SkillEnemyAssign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.SkillEnemyAssign.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attack: jspb.Message.getFieldWithDefault(msg, 3, 0),
    probability: (f = msg.getProbability()) && proto.battle.DecimalValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.SkillEnemyAssign}
 */
proto.battle.SkillEnemyAssign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.SkillEnemyAssign;
  return proto.battle.SkillEnemyAssign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.SkillEnemyAssign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.SkillEnemyAssign}
 */
proto.battle.SkillEnemyAssign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttack(value);
      break;
    case 4:
      var value = new proto.battle.DecimalValue;
      reader.readMessage(value,proto.battle.DecimalValue.deserializeBinaryFromReader);
      msg.setProbability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.SkillEnemyAssign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.SkillEnemyAssign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.SkillEnemyAssign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.SkillEnemyAssign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttack();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getProbability();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.battle.DecimalValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.SkillEnemyAssign.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.SkillEnemyAssign} returns this
 */
proto.battle.SkillEnemyAssign.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.battle.SkillEnemyAssign.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.SkillEnemyAssign} returns this
 */
proto.battle.SkillEnemyAssign.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 attack = 3;
 * @return {number}
 */
proto.battle.SkillEnemyAssign.prototype.getAttack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.SkillEnemyAssign} returns this
 */
proto.battle.SkillEnemyAssign.prototype.setAttack = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DecimalValue probability = 4;
 * @return {?proto.battle.DecimalValue}
 */
proto.battle.SkillEnemyAssign.prototype.getProbability = function() {
  return /** @type{?proto.battle.DecimalValue} */ (
    jspb.Message.getWrapperField(this, proto.battle.DecimalValue, 4));
};


/**
 * @param {?proto.battle.DecimalValue|undefined} value
 * @return {!proto.battle.SkillEnemyAssign} returns this
*/
proto.battle.SkillEnemyAssign.prototype.setProbability = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.SkillEnemyAssign} returns this
 */
proto.battle.SkillEnemyAssign.prototype.clearProbability = function() {
  return this.setProbability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.SkillEnemyAssign.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BattleState.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BattleState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BattleState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    battleid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    battlestatus: jspb.Message.getFieldWithDefault(msg, 3, ""),
    player: (f = msg.getPlayer()) && proto.battle.Player.toObject(includeInstance, f),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    modified: (f = msg.getModified()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BattleState}
 */
proto.battle.BattleState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BattleState;
  return proto.battle.BattleState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BattleState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BattleState}
 */
proto.battle.BattleState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattlestatus(value);
      break;
    case 4:
      var value = new proto.battle.Player;
      reader.readMessage(value,proto.battle.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BattleState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BattleState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BattleState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBattlestatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.battle.Player.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getModified();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.BattleState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleState} returns this
 */
proto.battle.BattleState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string battleId = 2;
 * @return {string}
 */
proto.battle.BattleState.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleState} returns this
 */
proto.battle.BattleState.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string battleStatus = 3;
 * @return {string}
 */
proto.battle.BattleState.prototype.getBattlestatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleState} returns this
 */
proto.battle.BattleState.prototype.setBattlestatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Player player = 4;
 * @return {?proto.battle.Player}
 */
proto.battle.BattleState.prototype.getPlayer = function() {
  return /** @type{?proto.battle.Player} */ (
    jspb.Message.getWrapperField(this, proto.battle.Player, 4));
};


/**
 * @param {?proto.battle.Player|undefined} value
 * @return {!proto.battle.BattleState} returns this
*/
proto.battle.BattleState.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleState} returns this
 */
proto.battle.BattleState.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleState.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp created = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.BattleState.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.BattleState} returns this
*/
proto.battle.BattleState.prototype.setCreated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleState} returns this
 */
proto.battle.BattleState.prototype.clearCreated = function() {
  return this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleState.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp modified = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.BattleState.prototype.getModified = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.BattleState} returns this
*/
proto.battle.BattleState.prototype.setModified = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleState} returns this
 */
proto.battle.BattleState.prototype.clearModified = function() {
  return this.setModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleState.prototype.hasModified = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hero: (f = msg.getHero()) && proto.battle.HeroAssign.toObject(includeInstance, f),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentexp: (f = msg.getCurrentexp()) && proto.battle.DecimalValue.toObject(includeInstance, f),
    requiredexp: (f = msg.getRequiredexp()) && proto.battle.DecimalValue.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Player}
 */
proto.battle.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Player;
  return proto.battle.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Player}
 */
proto.battle.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.battle.HeroAssign;
      reader.readMessage(value,proto.battle.HeroAssign.deserializeBinaryFromReader);
      msg.setHero(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = new proto.battle.DecimalValue;
      reader.readMessage(value,proto.battle.DecimalValue.deserializeBinaryFromReader);
      msg.setCurrentexp(value);
      break;
    case 6:
      var value = new proto.battle.DecimalValue;
      reader.readMessage(value,proto.battle.DecimalValue.deserializeBinaryFromReader);
      msg.setRequiredexp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHero();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.battle.HeroAssign.serializeBinaryToWriter
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCurrentexp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.battle.DecimalValue.serializeBinaryToWriter
    );
  }
  f = message.getRequiredexp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.battle.DecimalValue.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.battle.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional HeroAssign hero = 3;
 * @return {?proto.battle.HeroAssign}
 */
proto.battle.Player.prototype.getHero = function() {
  return /** @type{?proto.battle.HeroAssign} */ (
    jspb.Message.getWrapperField(this, proto.battle.HeroAssign, 3));
};


/**
 * @param {?proto.battle.HeroAssign|undefined} value
 * @return {!proto.battle.Player} returns this
*/
proto.battle.Player.prototype.setHero = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.clearHero = function() {
  return this.setHero(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.Player.prototype.hasHero = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.battle.Player.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional DecimalValue currentExp = 5;
 * @return {?proto.battle.DecimalValue}
 */
proto.battle.Player.prototype.getCurrentexp = function() {
  return /** @type{?proto.battle.DecimalValue} */ (
    jspb.Message.getWrapperField(this, proto.battle.DecimalValue, 5));
};


/**
 * @param {?proto.battle.DecimalValue|undefined} value
 * @return {!proto.battle.Player} returns this
*/
proto.battle.Player.prototype.setCurrentexp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.clearCurrentexp = function() {
  return this.setCurrentexp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.Player.prototype.hasCurrentexp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DecimalValue requiredExp = 6;
 * @return {?proto.battle.DecimalValue}
 */
proto.battle.Player.prototype.getRequiredexp = function() {
  return /** @type{?proto.battle.DecimalValue} */ (
    jspb.Message.getWrapperField(this, proto.battle.DecimalValue, 6));
};


/**
 * @param {?proto.battle.DecimalValue|undefined} value
 * @return {!proto.battle.Player} returns this
*/
proto.battle.Player.prototype.setRequiredexp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.clearRequiredexp = function() {
  return this.setRequiredexp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.Player.prototype.hasRequiredexp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string userId = 7;
 * @return {string}
 */
proto.battle.Player.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Player} returns this
 */
proto.battle.Player.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.HeroAssign.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.HeroAssign.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.HeroAssign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.HeroAssign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.HeroAssign.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    heroname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    health: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attack: jspb.Message.getFieldWithDefault(msg, 4, 0),
    heallvl: jspb.Message.getFieldWithDefault(msg, 5, 0),
    skillsList: jspb.Message.toObjectList(msg.getSkillsList(),
    proto.battle.SkillHeroAssign.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.HeroAssign}
 */
proto.battle.HeroAssign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.HeroAssign;
  return proto.battle.HeroAssign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.HeroAssign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.HeroAssign}
 */
proto.battle.HeroAssign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeroname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHealth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttack(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeallvl(value);
      break;
    case 6:
      var value = new proto.battle.SkillHeroAssign;
      reader.readMessage(value,proto.battle.SkillHeroAssign.deserializeBinaryFromReader);
      msg.addSkills(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.HeroAssign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.HeroAssign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.HeroAssign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.HeroAssign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeroname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAttack();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeallvl();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.battle.SkillHeroAssign.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.HeroAssign.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.HeroAssign} returns this
 */
proto.battle.HeroAssign.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string heroName = 2;
 * @return {string}
 */
proto.battle.HeroAssign.prototype.getHeroname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.HeroAssign} returns this
 */
proto.battle.HeroAssign.prototype.setHeroname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 health = 3;
 * @return {number}
 */
proto.battle.HeroAssign.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.HeroAssign} returns this
 */
proto.battle.HeroAssign.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 attack = 4;
 * @return {number}
 */
proto.battle.HeroAssign.prototype.getAttack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.HeroAssign} returns this
 */
proto.battle.HeroAssign.prototype.setAttack = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 healLvl = 5;
 * @return {number}
 */
proto.battle.HeroAssign.prototype.getHeallvl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.HeroAssign} returns this
 */
proto.battle.HeroAssign.prototype.setHeallvl = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated SkillHeroAssign skills = 6;
 * @return {!Array<!proto.battle.SkillHeroAssign>}
 */
proto.battle.HeroAssign.prototype.getSkillsList = function() {
  return /** @type{!Array<!proto.battle.SkillHeroAssign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.SkillHeroAssign, 6));
};


/**
 * @param {!Array<!proto.battle.SkillHeroAssign>} value
 * @return {!proto.battle.HeroAssign} returns this
*/
proto.battle.HeroAssign.prototype.setSkillsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.battle.SkillHeroAssign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.SkillHeroAssign}
 */
proto.battle.HeroAssign.prototype.addSkills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.battle.SkillHeroAssign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.HeroAssign} returns this
 */
proto.battle.HeroAssign.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.SkillHeroAssign.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.SkillHeroAssign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.SkillHeroAssign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.SkillHeroAssign.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attack: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.SkillHeroAssign}
 */
proto.battle.SkillHeroAssign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.SkillHeroAssign;
  return proto.battle.SkillHeroAssign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.SkillHeroAssign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.SkillHeroAssign}
 */
proto.battle.SkillHeroAssign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.SkillHeroAssign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.SkillHeroAssign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.SkillHeroAssign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.SkillHeroAssign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttack();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.SkillHeroAssign.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.SkillHeroAssign} returns this
 */
proto.battle.SkillHeroAssign.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.battle.SkillHeroAssign.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.SkillHeroAssign} returns this
 */
proto.battle.SkillHeroAssign.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 attack = 3;
 * @return {number}
 */
proto.battle.SkillHeroAssign.prototype.getAttack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.SkillHeroAssign} returns this
 */
proto.battle.SkillHeroAssign.prototype.setAttack = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.AddBattleEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.AddBattleEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.AddBattleEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.AddBattleEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enemyid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    action: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.AddBattleEventRequest}
 */
proto.battle.AddBattleEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.AddBattleEventRequest;
  return proto.battle.AddBattleEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.AddBattleEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.AddBattleEventRequest}
 */
proto.battle.AddBattleEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnemyid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.AddBattleEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.AddBattleEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.AddBattleEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.AddBattleEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnemyid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string battleId = 1;
 * @return {string}
 */
proto.battle.AddBattleEventRequest.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.AddBattleEventRequest} returns this
 */
proto.battle.AddBattleEventRequest.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerId = 2;
 * @return {string}
 */
proto.battle.AddBattleEventRequest.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.AddBattleEventRequest} returns this
 */
proto.battle.AddBattleEventRequest.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string enemyId = 3;
 * @return {string}
 */
proto.battle.AddBattleEventRequest.prototype.getEnemyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.AddBattleEventRequest} returns this
 */
proto.battle.AddBattleEventRequest.prototype.setEnemyid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string action = 4;
 * @return {string}
 */
proto.battle.AddBattleEventRequest.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.AddBattleEventRequest} returns this
 */
proto.battle.AddBattleEventRequest.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.AddBattleEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.AddBattleEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.AddBattleEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.AddBattleEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    battleid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: (f = msg.getAction()) && proto.battle.FightAction.toObject(includeInstance, f),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    level: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currentexp: (f = msg.getCurrentexp()) && proto.battle.DecimalValue.toObject(includeInstance, f),
    requiredexp: (f = msg.getRequiredexp()) && proto.battle.DecimalValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.AddBattleEventResponse}
 */
proto.battle.AddBattleEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.AddBattleEventResponse;
  return proto.battle.AddBattleEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.AddBattleEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.AddBattleEventResponse}
 */
proto.battle.AddBattleEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    case 3:
      var value = new proto.battle.FightAction;
      reader.readMessage(value,proto.battle.FightAction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 6:
      var value = new proto.battle.DecimalValue;
      reader.readMessage(value,proto.battle.DecimalValue.deserializeBinaryFromReader);
      msg.setCurrentexp(value);
      break;
    case 7:
      var value = new proto.battle.DecimalValue;
      reader.readMessage(value,proto.battle.DecimalValue.deserializeBinaryFromReader);
      msg.setRequiredexp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.AddBattleEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.AddBattleEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.AddBattleEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.AddBattleEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.battle.FightAction.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCurrentexp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.battle.DecimalValue.serializeBinaryToWriter
    );
  }
  f = message.getRequiredexp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.battle.DecimalValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.AddBattleEventResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string battleId = 2;
 * @return {string}
 */
proto.battle.AddBattleEventResponse.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FightAction action = 3;
 * @return {?proto.battle.FightAction}
 */
proto.battle.AddBattleEventResponse.prototype.getAction = function() {
  return /** @type{?proto.battle.FightAction} */ (
    jspb.Message.getWrapperField(this, proto.battle.FightAction, 3));
};


/**
 * @param {?proto.battle.FightAction|undefined} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
*/
proto.battle.AddBattleEventResponse.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.AddBattleEventResponse.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp created = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.AddBattleEventResponse.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
*/
proto.battle.AddBattleEventResponse.prototype.setCreated = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.clearCreated = function() {
  return this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.AddBattleEventResponse.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 level = 5;
 * @return {number}
 */
proto.battle.AddBattleEventResponse.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional DecimalValue currentExp = 6;
 * @return {?proto.battle.DecimalValue}
 */
proto.battle.AddBattleEventResponse.prototype.getCurrentexp = function() {
  return /** @type{?proto.battle.DecimalValue} */ (
    jspb.Message.getWrapperField(this, proto.battle.DecimalValue, 6));
};


/**
 * @param {?proto.battle.DecimalValue|undefined} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
*/
proto.battle.AddBattleEventResponse.prototype.setCurrentexp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.clearCurrentexp = function() {
  return this.setCurrentexp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.AddBattleEventResponse.prototype.hasCurrentexp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DecimalValue requiredExp = 7;
 * @return {?proto.battle.DecimalValue}
 */
proto.battle.AddBattleEventResponse.prototype.getRequiredexp = function() {
  return /** @type{?proto.battle.DecimalValue} */ (
    jspb.Message.getWrapperField(this, proto.battle.DecimalValue, 7));
};


/**
 * @param {?proto.battle.DecimalValue|undefined} value
 * @return {!proto.battle.AddBattleEventResponse} returns this
*/
proto.battle.AddBattleEventResponse.prototype.setRequiredexp = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.AddBattleEventResponse} returns this
 */
proto.battle.AddBattleEventResponse.prototype.clearRequiredexp = function() {
  return this.setRequiredexp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.AddBattleEventResponse.prototype.hasRequiredexp = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.FightAction.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.FightAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.FightAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.FightAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    character: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    damagedealt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    health: jspb.Message.getFieldWithDefault(msg, 5, 0),
    attackinfo: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.FightAction}
 */
proto.battle.FightAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.FightAction;
  return proto.battle.FightAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.FightAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.FightAction}
 */
proto.battle.FightAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDamagedealt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHealth(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttackinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.FightAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.FightAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.FightAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.FightAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCharacter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDamagedealt();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAttackinfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string characterId = 1;
 * @return {string}
 */
proto.battle.FightAction.prototype.getCharacterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.FightAction} returns this
 */
proto.battle.FightAction.prototype.setCharacterid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string character = 2;
 * @return {string}
 */
proto.battle.FightAction.prototype.getCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.FightAction} returns this
 */
proto.battle.FightAction.prototype.setCharacter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.battle.FightAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.FightAction} returns this
 */
proto.battle.FightAction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 damageDealt = 4;
 * @return {number}
 */
proto.battle.FightAction.prototype.getDamagedealt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.FightAction} returns this
 */
proto.battle.FightAction.prototype.setDamagedealt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 health = 5;
 * @return {number}
 */
proto.battle.FightAction.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.FightAction} returns this
 */
proto.battle.FightAction.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string attackInfo = 6;
 * @return {string}
 */
proto.battle.FightAction.prototype.getAttackinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.FightAction} returns this
 */
proto.battle.FightAction.prototype.setAttackinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.DecimalValue.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.DecimalValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.DecimalValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.DecimalValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    units: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.DecimalValue}
 */
proto.battle.DecimalValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.DecimalValue;
  return proto.battle.DecimalValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.DecimalValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.DecimalValue}
 */
proto.battle.DecimalValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnits(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.DecimalValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.DecimalValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.DecimalValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.DecimalValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnits();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeSfixed32(
      2,
      f
    );
  }
};


/**
 * optional int64 units = 1;
 * @return {number}
 */
proto.battle.DecimalValue.prototype.getUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.DecimalValue} returns this
 */
proto.battle.DecimalValue.prototype.setUnits = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sfixed32 nanos = 2;
 * @return {number}
 */
proto.battle.DecimalValue.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.DecimalValue} returns this
 */
proto.battle.DecimalValue.prototype.setNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Pair.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Pair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Pair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Pair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Pair}
 */
proto.battle.Pair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Pair;
  return proto.battle.Pair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Pair}
 */
proto.battle.Pair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Pair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Pair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Pair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Pair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.battle.Pair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.Pair} returns this
 */
proto.battle.Pair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.battle.Pair.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.Pair} returns this
 */
proto.battle.Pair.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.Dictionary.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.Dictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.Dictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.Dictionary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Dictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairsList: jspb.Message.toObjectList(msg.getPairsList(),
    proto.battle.Pair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.Dictionary}
 */
proto.battle.Dictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.Dictionary;
  return proto.battle.Dictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.Dictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.Dictionary}
 */
proto.battle.Dictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.battle.Pair;
      reader.readMessage(value,proto.battle.Pair.deserializeBinaryFromReader);
      msg.addPairs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.Dictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.Dictionary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.Dictionary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.Dictionary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.battle.Pair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Pair pairs = 1;
 * @return {!Array<!proto.battle.Pair>}
 */
proto.battle.Dictionary.prototype.getPairsList = function() {
  return /** @type{!Array<!proto.battle.Pair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.Pair, 1));
};


/**
 * @param {!Array<!proto.battle.Pair>} value
 * @return {!proto.battle.Dictionary} returns this
*/
proto.battle.Dictionary.prototype.setPairsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.battle.Pair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.Pair}
 */
proto.battle.Dictionary.prototype.addPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.battle.Pair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.Dictionary} returns this
 */
proto.battle.Dictionary.prototype.clearPairsList = function() {
  return this.setPairsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.StartBattleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.StartBattleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.StartBattleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.StartBattleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playerhealth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    enemyid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    enemyhealth: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.StartBattleResponse}
 */
proto.battle.StartBattleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.StartBattleResponse;
  return proto.battle.StartBattleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.StartBattleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.StartBattleResponse}
 */
proto.battle.StartBattleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerhealth(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnemyid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnemyhealth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.StartBattleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.StartBattleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.StartBattleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.StartBattleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayerhealth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEnemyid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEnemyhealth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string battleId = 1;
 * @return {string}
 */
proto.battle.StartBattleResponse.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.StartBattleResponse} returns this
 */
proto.battle.StartBattleResponse.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerId = 2;
 * @return {string}
 */
proto.battle.StartBattleResponse.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.StartBattleResponse} returns this
 */
proto.battle.StartBattleResponse.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 playerHealth = 3;
 * @return {number}
 */
proto.battle.StartBattleResponse.prototype.getPlayerhealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.StartBattleResponse} returns this
 */
proto.battle.StartBattleResponse.prototype.setPlayerhealth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string enemyId = 4;
 * @return {string}
 */
proto.battle.StartBattleResponse.prototype.getEnemyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.StartBattleResponse} returns this
 */
proto.battle.StartBattleResponse.prototype.setEnemyid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 enemyHealth = 5;
 * @return {number}
 */
proto.battle.StartBattleResponse.prototype.getEnemyhealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.battle.StartBattleResponse} returns this
 */
proto.battle.StartBattleResponse.prototype.setEnemyhealth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.GetCurrentBattlesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.GetCurrentBattlesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.GetCurrentBattlesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetCurrentBattlesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.GetCurrentBattlesRequest}
 */
proto.battle.GetCurrentBattlesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.GetCurrentBattlesRequest;
  return proto.battle.GetCurrentBattlesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.GetCurrentBattlesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.GetCurrentBattlesRequest}
 */
proto.battle.GetCurrentBattlesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.GetCurrentBattlesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.GetCurrentBattlesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.GetCurrentBattlesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetCurrentBattlesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.battle.GetCurrentBattlesRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.GetCurrentBattlesRequest} returns this
 */
proto.battle.GetCurrentBattlesRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.battle.GetCurrentBattlesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.GetCurrentBattlesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.GetCurrentBattlesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.GetCurrentBattlesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetCurrentBattlesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    battlesList: jspb.Message.toObjectList(msg.getBattlesList(),
    proto.battle.BattleDto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.GetCurrentBattlesResponse}
 */
proto.battle.GetCurrentBattlesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.GetCurrentBattlesResponse;
  return proto.battle.GetCurrentBattlesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.GetCurrentBattlesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.GetCurrentBattlesResponse}
 */
proto.battle.GetCurrentBattlesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.battle.BattleDto;
      reader.readMessage(value,proto.battle.BattleDto.deserializeBinaryFromReader);
      msg.addBattles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.GetCurrentBattlesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.GetCurrentBattlesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.GetCurrentBattlesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetCurrentBattlesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.battle.BattleDto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BattleDto battles = 1;
 * @return {!Array<!proto.battle.BattleDto>}
 */
proto.battle.GetCurrentBattlesResponse.prototype.getBattlesList = function() {
  return /** @type{!Array<!proto.battle.BattleDto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.battle.BattleDto, 1));
};


/**
 * @param {!Array<!proto.battle.BattleDto>} value
 * @return {!proto.battle.GetCurrentBattlesResponse} returns this
*/
proto.battle.GetCurrentBattlesResponse.prototype.setBattlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.battle.BattleDto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.battle.BattleDto}
 */
proto.battle.GetCurrentBattlesResponse.prototype.addBattles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.battle.BattleDto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.battle.GetCurrentBattlesResponse} returns this
 */
proto.battle.GetCurrentBattlesResponse.prototype.clearBattlesList = function() {
  return this.setBattlesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.BattleDto.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.BattleDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.BattleDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startdate: (f = msg.getStartdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    battleinfo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    enddate: (f = msg.getEnddate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.BattleDto}
 */
proto.battle.BattleDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.BattleDto;
  return proto.battle.BattleDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.BattleDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.BattleDto}
 */
proto.battle.BattleDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartdate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleinfo(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnddate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.BattleDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.BattleDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.BattleDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.BattleDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBattleinfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEnddate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.battle.BattleDto.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleDto} returns this
 */
proto.battle.BattleDto.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp StartDate = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.BattleDto.prototype.getStartdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.BattleDto} returns this
*/
proto.battle.BattleDto.prototype.setStartdate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleDto} returns this
 */
proto.battle.BattleDto.prototype.clearStartdate = function() {
  return this.setStartdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleDto.prototype.hasStartdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string userId = 3;
 * @return {string}
 */
proto.battle.BattleDto.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleDto} returns this
 */
proto.battle.BattleDto.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string BattleInfo = 4;
 * @return {string}
 */
proto.battle.BattleDto.prototype.getBattleinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.BattleDto} returns this
 */
proto.battle.BattleDto.prototype.setBattleinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp EndDate = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.BattleDto.prototype.getEnddate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.BattleDto} returns this
*/
proto.battle.BattleDto.prototype.setEnddate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.BattleDto} returns this
 */
proto.battle.BattleDto.prototype.clearEnddate = function() {
  return this.setEnddate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.BattleDto.prototype.hasEnddate = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.GetBattleStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.GetBattleStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.GetBattleStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetBattleStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.GetBattleStateRequest}
 */
proto.battle.GetBattleStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.GetBattleStateRequest;
  return proto.battle.GetBattleStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.GetBattleStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.GetBattleStateRequest}
 */
proto.battle.GetBattleStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.GetBattleStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.GetBattleStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.GetBattleStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetBattleStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string battleId = 1;
 * @return {string}
 */
proto.battle.GetBattleStateRequest.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.GetBattleStateRequest} returns this
 */
proto.battle.GetBattleStateRequest.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.battle.GetBattleStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.battle.GetBattleStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.battle.GetBattleStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetBattleStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    battleid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    battlestatus: jspb.Message.getFieldWithDefault(msg, 3, ""),
    player: (f = msg.getPlayer()) && proto.battle.Player.toObject(includeInstance, f),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    modified: (f = msg.getModified()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.battle.GetBattleStateResponse}
 */
proto.battle.GetBattleStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.battle.GetBattleStateResponse;
  return proto.battle.GetBattleStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.battle.GetBattleStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.battle.GetBattleStateResponse}
 */
proto.battle.GetBattleStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattleid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattlestatus(value);
      break;
    case 4:
      var value = new proto.battle.Player;
      reader.readMessage(value,proto.battle.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.battle.GetBattleStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.battle.GetBattleStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.battle.GetBattleStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.battle.GetBattleStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBattleid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBattlestatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.battle.Player.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getModified();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.battle.GetBattleStateResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.GetBattleStateResponse} returns this
 */
proto.battle.GetBattleStateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BattleId = 2;
 * @return {string}
 */
proto.battle.GetBattleStateResponse.prototype.getBattleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.GetBattleStateResponse} returns this
 */
proto.battle.GetBattleStateResponse.prototype.setBattleid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string BattleStatus = 3;
 * @return {string}
 */
proto.battle.GetBattleStateResponse.prototype.getBattlestatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.battle.GetBattleStateResponse} returns this
 */
proto.battle.GetBattleStateResponse.prototype.setBattlestatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Player Player = 4;
 * @return {?proto.battle.Player}
 */
proto.battle.GetBattleStateResponse.prototype.getPlayer = function() {
  return /** @type{?proto.battle.Player} */ (
    jspb.Message.getWrapperField(this, proto.battle.Player, 4));
};


/**
 * @param {?proto.battle.Player|undefined} value
 * @return {!proto.battle.GetBattleStateResponse} returns this
*/
proto.battle.GetBattleStateResponse.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.GetBattleStateResponse} returns this
 */
proto.battle.GetBattleStateResponse.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.GetBattleStateResponse.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp Created = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.GetBattleStateResponse.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.GetBattleStateResponse} returns this
*/
proto.battle.GetBattleStateResponse.prototype.setCreated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.GetBattleStateResponse} returns this
 */
proto.battle.GetBattleStateResponse.prototype.clearCreated = function() {
  return this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.GetBattleStateResponse.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp Modified = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.battle.GetBattleStateResponse.prototype.getModified = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.battle.GetBattleStateResponse} returns this
*/
proto.battle.GetBattleStateResponse.prototype.setModified = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.battle.GetBattleStateResponse} returns this
 */
proto.battle.GetBattleStateResponse.prototype.clearModified = function() {
  return this.setModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.battle.GetBattleStateResponse.prototype.hasModified = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.battle);
